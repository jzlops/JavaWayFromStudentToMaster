
                              
Tech and Media Labs
Tutorials About RSS
This site uses cookies to improve the user experience.
Java IO

    Java IO Tutorial
    Java IO Overview
    Java IO: Files
    Java IO: Pipes
    Java IO: Networking
    Java IO: Byte & Char Arrays
    Java IO: System.in, System.out, and System.error
    Java IO: Streams
    Java IO: Input Parsing
    Java IO: Readers and Writers
    Java IO: Concurrent IO
    Java IO: Exception Handling
    Java IO: InputStream
    Java IO: OutputStream
    Java IO: FileInputStream
    Java IO: FileOutputStream
    Java IO: RandomAccessFile
    Java IO: File
    Java IO: PipedInputStream
    Java IO: PipedOutputStream
    Java IO: ByteArrayInputStream
    Java IO: ByteArrayOutputStream
    Java IO: FilterInputStream
    Java IO: FilterOutputStream
    Java IO: BufferedInputStream
    Java IO: BufferedOutputStream
    Java IO: PushbackInputStream
    Java IO: SequenceInputStream
    Java IO: DataInputStream
    Java IO: DataOutputStream
    Java IO: PrintStream
    Java IO: ObjectInputStream
    Java IO: ObjectOutputStream
    Java IO: Serializable
    Java IO: Reader
    Java IO: Writer
    Java IO: InputStreamReader
    Java IO: OutputStreamWriter
    Java IO: FileReader
    Java IO: FileWriter
    Java IO: PipedReader
    Java IO: PipedWriter
    Java IO: CharArrayReader
    Java IO: CharArrayWriter
    Java IO: BufferedReader
    Java IO: BufferedWriter
    Java IO: FilterReader
    Java IO: FilterWriter
    Java IO: PushbackReader
    Java IO: LineNumberReader
    Java IO: StreamTokenizer
    Java IO: PrintWriter
    Java IO: StringReader
    Java IO: StringWriter





Java IO Overview

    Input and Output - Source and Destination
        Streams
        The InputStream, OutputStream, Reader and Writer
    Java IO Purposes and Features
    Java IO Class Overview Table

	

Jakob Jenkov
Last update: 2014-10-07

In this text I will try to give you an overview of the classes in the Java IO (java.io) package. More specifically, I will try to group the classes after their purpose. This grouping should make it easier for you in the future, to determine the purpose of a class, or find the class you need for a specific purpose.
Input and Output - Source and Destination

The terms "input" and "output" can sometimes be a bit confusing. The input of one part of an application is often the output of another. Is an OutputStream a stream where output is written to, or output comes out from (for you to read)? After all, an InputStream outputs its data to the reading program, doesn't it? Personally, I found this a bit confusing back in the day when I first started out learning about Java IO.

In an attempt to clear out this possible confusion, I have tried to put some different names on input and output to try to link them conceptually to where the input comes from, and where the output goes.

Java's IO package mostly concerns itself with the reading of raw data from a source and writing of raw data to a destination. The most typical sources and destinations of data are these:

    Files
    Pipes
    Network Connections
    In-memory Buffers (e.g. arrays)
    System.in, System.out, System.error

The diagram below illustrates the principle of a program reading data from a source and writing it to some destination:
Source Program Destination
Streams

IO Streams are a core concept in Java IO. A stream is a conceptually endless flow of data. You can either read from a stream or write to a stream. A stream is connected to a data source or a data destination. Streams in Java IO can be either byte based (reading and writing bytes) or character based (reading and writing characters).
The InputStream, OutputStream, Reader and Writer

A program that needs to read data from some source needs an InputStream or a Reader. A program that needs to write data to some destination needs an OutputStream or a Writer. This is also illustrated in the diagram below:
Source InputStream / Reader Program Program OutputStream / Writer Destination

An InputStream or Reader is linked to a source of data. An OutputStream or Writer is linked to a destination of data.
Java IO Purposes and Features

Java IO contains many subclasses of the InputStream, OutputStream, Reader and Writer classes. The reason is, that all of these subclasses are addressing various different purposes. That is why there are so many different classes. The purposes addressed are summarized below:

    File Access
    Network Access
    Internal Memory Buffer Access
    Inter-Thread Communication (Pipes)
    Buffering
    Filtering
    Parsing
    Reading and Writing Text (Readers / Writers)
    Reading and Writing Primitive Data (long, int etc.)
    Reading and Writing Objects

These purposes are nice to know about when reading through the Java IO classes. They make it somewhat easier to understand what the classes are targeting.
Java IO Class Overview Table

Having discussed sources, destinations, input, output and the various IO purposes targeted by the Java IO classes, here is a table listing most (if not all) Java IO classes divided by input, output, being byte based or character based, and any more specific purpose they may be addressing, like buffering, parsing etc.
  	Byte Based 	Character Based
  	Input 	Output 	Input 	Output
Basic 	InputStream 	OutputStream 	Reader
InputStreamReader 	Writer
OutputStreamWriter
Arrays 	ByteArrayInputStream 	ByteArrayOutputStream 	CharArrayReader 	CharArrayWriter
Files 	FileInputStream
RandomAccessFile 	FileOutputStream
RandomAccessFile 	FileReader 	FileWriter
Pipes 	PipedInputStream 	PipedOutputStream 	PipedReader 	PipedWriter
Buffering 	BufferedInputStream 	BufferedOutputStream 	BufferedReader 	BufferedWriter
Filtering 	FilterInputStream 	FilterOutputStream 	FilterReader 	FilterWriter
Parsing 	PushbackInputStream
StreamTokenizer 	  	PushbackReader
LineNumberReader 	 
Strings 	  	  	StringReader 	StringWriter
Data 	DataInputStream 	DataOutputStream 	  	
Data - Formatted 	  	PrintStream 	  	PrintWriter
Objects 	ObjectInputStream 	ObjectOutputStream 	  	 
Utilities 	SequenceInputStream
	  	  	 
Next: Java IO: Files
	

Jakob Jenkov



Copyright  Jenkov Aps
All Trails
Trail TOC
Page TOC
Previous
Next

long 	getFilePointer()
Returns the current offset in this file.
long 	length()
Returns the length of this file.
int 	read()
Reads a byte of data from this file.
int 	read(byte[] b)
Reads up to b.length bytes of data from this file into an array of bytes.
int 	read(byte[] b, int off, int len)
Reads up to len bytes of data from this file into an array of bytes.
boolean 	readBoolean()
Reads a boolean from this file.
byte 	readByte()
Reads a signed eight-bit value from this file.
char 	readChar()
Reads a character from this file.
double 	readDouble()
Reads a double from this file.
float 	readFloat()
Reads a float from this file.
void 	readFully(byte[] b)
Reads b.length bytes from this file into the byte array, starting at the current file pointer.
void 	readFully(byte[] b, int off, int len)
Reads exactly len bytes from this file into the byte array, starting at the current file pointer.
int 	readInt()
Reads a signed 32-bit integer from this file.
String 	readLine()
Reads the next line of text from this file.
long 	readLong()
Reads a signed 64-bit integer from this file.
short 	readShort()
Reads a signed 16-bit number from this file.
int 	readUnsignedByte()
Reads an unsigned eight-bit number from this file.
int 	readUnsignedShort()
Reads an unsigned 16-bit number from this file.
String 	readUTF()
Reads in a string from this file.
void 	seek(long pos)
Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.
void 	setLength(long newLength)
Sets the length of this file.
int 	skipBytes(int n)
Attempts to skip over n bytes of input discarding the skipped bytes.
void 	write(byte[] b)
Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.
void 	write(byte[] b, int off, int len)
Writes len bytes from the specified byte array starting at offset off to this file.
void 	write(int b)
Writes the specified byte to this file.
void 	writeBoolean(boolean v)
Writes a boolean to the file as a one-byte value.
void 	writeByte(int v)
Writes a byte to the file as a one-byte value.
void 	writeBytes(String s)
Writes the string to the file as a sequence of bytes.
void 	writeChar(int v)
Writes a char to the file as a two-byte value, high byte first.
void 	writeChars(String s)
Writes a string to the file as a sequence of characters.
void 	writeDouble(double v)
Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first.
void 	writeFloat(float v)
Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first.
void 	writeInt(int v)
Writes an int to the file as four bytes, high byte first.
void 	writeLong(long v)
Writes a long to the file as eight bytes, high byte first.
void 	writeShort(int v)
Writes a short to the file as two bytes, high byte first.
void 	writeUTF(String str)
Writes a string to the file using modified UTF-8 encoding in a machine-independent manner.