



























	
	
Next
Java IO
Streams
	  	  	 
Page TOC
Previous
    Files
    Pipes
Trail TOC
All Trails
    Parsing
int 	read()
Jakob Jenkov
Jakob Jenkov
    Buffering
    Filtering
long 	length()
int 	readInt()
        Streams
    File Access
Java IO Overview
byte 	readByte()
char 	readChar()
long 	readLong()
    Java IO: File
String 	readUTF()
    Java IO: Files
    Java IO: Pipes
    Network Access
OutputStreamWriter
float 	readFloat()
String 	readLine()
short 	readShort()
void 	write(int b)
Tech and Media Labs
Tutorials About RSS
    Java IO: Reader
    Java IO: Writer
LineNumberReader 	 
int 	read(byte[] b)
    Java IO Tutorial
    Java IO Overview
    Java IO: Streams
Next: Java IO: Files
double 	readDouble()
void 	seek(long pos)
Copyright  Jenkov Aps
int 	skipBytes(int n)
void 	write(byte[] b)
void 	writeInt(int v)
Files 	FileInputStream
long 	getFilePointer()
boolean 	readBoolean()
void 	writeByte(int v)
void 	writeChar(int v)
    Java IO: Networking
    Java IO: FileReader
    Java IO: FileWriter
Last update: 2014-10-07
    Network Connections
int 	readUnsignedByte()
void 	writeLong(long v)
void 	writeShort(int v)
    Java IO: InputStream
    Java IO: PrintStream
    Java IO: PipedReader
    Java IO: PipedWriter
    Java IO: PrintWriter
int 	readUnsignedShort()
    Java IO: OutputStream
    Java IO: Serializable
    Java IO: FilterReader
    Java IO: FilterWriter
    Java IO: StringReader
    Java IO: StringWriter
InputStreamReader 	Writer
void 	readFully(byte[] b)
void 	writeFloat(float v)
    Java IO: Input Parsing
    Java IO: Concurrent IO
Source Program Destination
void 	writeBytes(String s)
void 	writeChars(String s)
void 	writeUTF(String str)
    Java IO: BufferedReader
    Java IO: BufferedWriter
    Java IO: PushbackReader
void 	writeDouble(double v)
    Java IO: FileInputStream
    Java IO: DataInputStream
    Java IO: CharArrayReader
    Java IO: CharArrayWriter
    Java IO: StreamTokenizer
Java IO Class Overview Table
Parsing 	PushbackInputStream
    Java IO: FileOutputStream
    Java IO: RandomAccessFile
    Java IO: PipedInputStream
    Java IO: DataOutputStream
    Java IO: LineNumberReader
Java IO Purposes and Features
Reads a float from this file.
Sets the length of this file.
void 	writeBoolean(boolean v)
                              
    Java IO: PipedOutputStream
    Java IO: FilterInputStream
    Java IO: ObjectInputStream
    Java IO: InputStreamReader
  	Byte Based 	Character Based
Utilities 	SequenceInputStream
Reads a double from this file.
    Java IO: Byte & Char Arrays
    Java IO: Exception Handling
    Java IO: FilterOutputStream
    Java IO: ObjectOutputStream
    Java IO: OutputStreamWriter
    Reading and Writing Objects
  	Input 	Output 	Input 	Output
Reads a boolean from this file.
void 	setLength(long newLength)
    Java IO: Readers and Writers
    Java IO: BufferedInputStream
    Java IO: PushbackInputStream
    Java IO: SequenceInputStream
    Java IO Class Overview Table
Returns the length of this file.
    Java IO: ByteArrayInputStream
    Java IO: BufferedOutputStream
    Java IO Purposes and Features
    Internal Memory Buffer Access
Reads a character from this file.
Reads in a string from this file.
    Java IO: ByteArrayOutputStream
RandomAccessFile 	FileOutputStream
StreamTokenizer 	  	PushbackReader
    In-memory Buffers (e.g. arrays)
Reads a byte of data from this file.
int 	read(byte[] b, int off, int len)
    Inter-Thread Communication (Pipes)
    System.in, System.out, System.error
void 	write(byte[] b, int off, int len)
Writes the specified byte to this file.
Basic 	InputStream 	OutputStream 	Reader
RandomAccessFile 	FileReader 	FileWriter
Returns the current offset in this file.
Input and Output - Source and Destination
Strings 	  	  	StringReader 	StringWriter
void 	readFully(byte[] b, int off, int len)
Reads the next line of text from this file.
Data 	DataInputStream 	DataOutputStream 	  	
Reads a signed 16-bit number from this file.
    Input and Output - Source and Destination
Reads a signed 32-bit integer from this file.
Reads a signed 64-bit integer from this file.
Reads a signed eight-bit value from this file.
Writes a byte to the file as a one-byte value.
Reads an unsigned 16-bit number from this file.
The InputStream, OutputStream, Reader and Writer
    Reading and Writing Text (Readers / Writers)
Data - Formatted 	  	PrintStream 	  	PrintWriter
Writes a boolean to the file as a one-byte value.
Reads an unsigned eight-bit number from this file.
    Java IO: System.in, System.out, and System.error
Objects 	ObjectInputStream 	ObjectOutputStream 	  	 
Writes the string to the file as a sequence of bytes.
This site uses cookies to improve the user experience.
    Reading and Writing Primitive Data (long, int etc.)
        The InputStream, OutputStream, Reader and Writer
Writes a string to the file as a sequence of characters.
Writes an int to the file as four bytes, high byte first.
Writes a short to the file as two bytes, high byte first.
Writes a long to the file as eight bytes, high byte first.
Writes a char to the file as a two-byte value, high byte first.
Pipes 	PipedInputStream 	PipedOutputStream 	PipedReader 	PipedWriter
Reads up to len bytes of data from this file into an array of bytes.
Attempts to skip over n bytes of input discarding the skipped bytes.
Reads up to b.length bytes of data from this file into an array of bytes.
Filtering 	FilterInputStream 	FilterOutputStream 	FilterReader 	FilterWriter
Source InputStream / Reader Program Program OutputStream / Writer Destination
Writes len bytes from the specified byte array starting at offset off to this file.
Buffering 	BufferedInputStream 	BufferedOutputStream 	BufferedReader 	BufferedWriter
Arrays 	ByteArrayInputStream 	ByteArrayOutputStream 	CharArrayReader 	CharArrayWriter
Writes a string to the file using modified UTF-8 encoding in a machine-independent manner.
Reads b.length bytes from this file into the byte array, starting at the current file pointer.
Reads exactly len bytes from this file into the byte array, starting at the current file pointer.
Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.
Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.
An InputStream or Reader is linked to a source of data. An OutputStream or Writer is linked to a destination of data.
The diagram below illustrates the principle of a program reading data from a source and writing it to some destination:
These purposes are nice to know about when reading through the Java IO classes. They make it somewhat easier to understand what the classes are targeting.
Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first.
Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first.
Java's IO package mostly concerns itself with the reading of raw data from a source and writing of raw data to a destination. The most typical sources and destinations of data are these:
In an attempt to clear out this possible confusion, I have tried to put some different names on input and output to try to link them conceptually to where the input comes from, and where the output goes.
A program that needs to read data from some source needs an InputStream or a Reader. A program that needs to write data to some destination needs an OutputStream or a Writer. This is also illustrated in the diagram below:
Java IO contains many subclasses of the InputStream, OutputStream, Reader and Writer classes. The reason is, that all of these subclasses are addressing various different purposes. That is why there are so many different classes. The purposes addressed are summarized below:
In this text I will try to give you an overview of the classes in the Java IO (java.io) package. More specifically, I will try to group the classes after their purpose. This grouping should make it easier for you in the future, to determine the purpose of a class, or find the class you need for a specific purpose.
Having discussed sources, destinations, input, output and the various IO purposes targeted by the Java IO classes, here is a table listing most (if not all) Java IO classes divided by input, output, being byte based or character based, and any more specific purpose they may be addressing, like buffering, parsing etc.
IO Streams are a core concept in Java IO. A stream is a conceptually endless flow of data. You can either read from a stream or write to a stream. A stream is connected to a data source or a data destination. Streams in Java IO can be either byte based (reading and writing bytes) or character based (reading and writing characters).
The terms "input" and "output" can sometimes be a bit confusing. The input of one part of an application is often the output of another. Is an OutputStream a stream where output is written to, or output comes out from (for you to read)? After all, an InputStream outputs its data to the reading program, doesn't it? Personally, I found this a bit confusing back in the day when I first started out learning about Java IO.
